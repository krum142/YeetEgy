@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using Yeetegy.Common
@using Yeetegy.Data.Models
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "PostDetails";
    var avatar = this.UserManager.Users.Where(x => x.UserName == User.Identity.Name).Select(x => x.AvatarUrl).FirstOrDefault();
    if (avatar == null)
    {
        avatar = GlobalConstants.DefaultUserImg;
    }
}
@model Yeetegy.Web.ViewModels.PostViewModels.PostDetailsViewModel
<p type="hidden" id="postId" value="@Model.PostViewModel.Id"></p>
<p type="hidden" id="userId" value="@User.FindFirstValue(ClaimTypes.NameIdentifier)"></p>
<div class="row">

    <partial name="_SideNavBarPartial" model="Model.CategoryViewModel"></partial>

    <div class="col-lg-9" style="margin-top: 25px;">
        <div>
            <form id="voteform" method="post"></form>
            <div class="col-lg-8 col-md-12" style="margin-bottom: 30px">
                <div class="row" style="margin-left: 1%">
                    <h5><span class="badge badge-light">@Model.PostViewModel.CategoryName</span></h5>
                    <h5><span class="badge badge-light">@Model.PostViewModel.Time</span></h5>
                </div>
                <div class="card">
                    <div class="card-header font-italic">
                        <h5><b>@Model.PostViewModel.Tittle</b></h5>
                    </div>
                    <img id="srcP" src="@Model.PostViewModel.ImgUrl" class="card-img-top" alt="image">
                    <div class="card-footer">
                        <div class="row">
                            <button type="button" onClick="voteButton()" id="Post_Like_@Model.PostViewModel.Id" class="btn btn-dark fa fa-thumbs-up" style="width: 150px;margin-right: 3px">@Model.PostViewModel.Likes</button>
                            <button type="button" onClick="voteButton()" id="Post_Dislike_@Model.PostViewModel.Id" class="btn btn-dark fa fa-thumbs-down" style="width: 150px;margin-right: 3px">@Model.PostViewModel.Dislikes</button>
                            <button type="button" class="btn btn-dark fa fa-align-justify" data-toggle="dropdown" aria-expanded="false">
                            </button>
                            <div class="dropdown-menu">
                                <a class="dropdown-item" href="@Model.PostViewModel.ImgUrl" download>Download</a>
                                @if (this.User.Identity.Name == Model.PostViewModel.ApplicationUserUserName || this.User.IsInRole("Administrator"))
                                {
                                    <a class="dropdown-item" onclick="deletePost()" id="@Model.PostViewModel.Id">Delete</a>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <hr style="border-top: 2px solid #043927;">
                <div class="row">
                    <div style="width: 14%;">
                        <img id="avatarUrl" style="display: block; margin: 0 auto; border-radius: 50%;" width="50" height="50" src="@avatar" />
                    </div>
                    <div style="width: 83%; float: right;">
                        <div class="spinner-border text-success" id="commentSpinner" hidden role="status">
                            <span class="sr-only"></span>
                        </div>
                        <span class="badge badge-pill" id="commentError"></span>
                        <textarea placeholder="Enter your comment here..." id="commentDescription" class="form-control" style="resize: none; width: 100%"></textarea>
                        <div style="width: 100%; height: 41px; margin-top: 1px">
                            <label>
                                <span class="btn btn-warning">
                                    Add IMG… <input type="file" class="custom-file-input" style="display: none;" id="commentFileInput">
                                </span>
                            </label>
                            <button class="btn btn-warning" onclick="addComment()" style="float: right">Post</button>
                            <button class="btn btn-light" onclick="clearComment()" style="float: right">Clear</button>
                        </div>
                    </div>
                </div>
                <hr style="border-top: 2px solid #043927; margin-top: 13px">
                <div id="Comment-Container">
                    <hr>
                </div>
            </div>
        </div>
    </div>
</div>


</div>
@section Scripts {
    <script src="~/js/general.js" asp-append-version="true"></script>
    <script src="~/js/comments.js"></script>
    <script src="~/js/site.js"></script>
    <script>

        var deleteInProgress = false;
        function deleteComment() { // ajax
            var commentId = event.target.getAttribute("id");
            var token = $("#voteform input[name=__RequestVerificationToken]").val();
            var deleteUrl = "@Url.Action("Delete","Comments")";

            var obj = new FormData();
            obj.set("id",commentId);
            if (deleteInProgress === false) {
                deleteInProgress = true;
                fetch(deleteUrl,
                    {
                        method: 'DELETE',
                        headers: {
                            'X-CSRF-TOKEN': token
                        },
                        body: obj
                    }).then(response => {
                    if (response.status === 200) {
                        $("#CommentId_" + commentId).remove();
                    }
                    deleteInProgress = false;
                });
            }

        }

        function loadReplays() { // ajax
            var commentId = event.target.getAttribute("id").split('_')[1];
            $("#LoadReplays_" + commentId).remove();
            fetch("@Url.Action("Get","Replays")?commentId=" + commentId,
                {
                    method: "GET"
                }).then(response => {
                if (response.status === 200) {
                    response.text().then(html => {
                        //$("#Comment_" + commentId).remove();
                        $("#Replay-Container_" + commentId).append(html);
                    });
                }
            });
        }

        var myPageIndex = 0;
        var noMoredata = false;
        var inProgress = false;
        var postid = "@Model.PostViewModel.Id";
        function domOperationComments() { // ajax
            if (noMoredata === false && inProgress === false) {
                inProgress = true;
                fetch('@Url.Action("Get","Comments")?postId=' + postid + '&offset=' + myPageIndex,
                    {
                        method: "GET",
                    }).then(response => {
                    if (response.status === 200) {
                        response.text().then(html => {
                            if (html.length < 10) {
                                noMoredata = true;
                            } else {
                                document.getElementById("Comment-Container").innerHTML += html;
                            }
                        });
                        inProgress = false;
                        myPageIndex += @GlobalConstants.LoadCommentsCountAjax;
                    }
                });
            }
        }

        function loadComments() {
            var docHeight = $(document).height();
            var winScrolled = $(window).height() + $(window).scrollTop();
            if ((docHeight - winScrolled) < 200) { // scroll time
                domOperationComments.call();
            }
        }

        $(window).resize(function() {
            resizeCategory.call();
        });
        $(document).ready(function() {
            resizeCategory.call();
            domOperationComments.call();
            $(window).on("scroll", loadComments);
        });
    </script>
}
